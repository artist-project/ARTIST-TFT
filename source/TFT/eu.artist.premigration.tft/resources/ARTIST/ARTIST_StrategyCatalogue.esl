/*******************************************************************************
 * Copyright (c) 2014 Vienna University of Technology.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Martin Fleck (Vienna University of Technology) - initial API and implementation
 *
 * Initially developed in the context of ARTIST EU project www.artist-project.eu
 *******************************************************************************/

import eu.artist.property.catalogue.nonfunctional.*

/**
 * Evaluation strategies to get concrete values for the properties of interest.
 * Evaluations can be done on model level (simulation, analysis) or on 
 * code level (analysis, monitoring).
 */
strategy-catalogue eu.artist.catalogue.strategies {
	
	/**
	 * Generates some random values in a given probability.
	 */
	strategy RandomValueGeneration {
		description "Generates some random values in a given probability.",
		level model,
		evaluates [
			Throughput
		]
	}
	
	strategy ModelBasedAnalysisFUML {
		description "Model-based analysis with fUML",
		level model,
		evaluates [
			Throughput,
			AverageSystemLoginTime,
			Utilization,
			RequestWaitingTime,
			CPUUsage,
			RequestServiceTime,
			MemoryUsage,
			CostStorage
		]
	}
	
	strategy ModelBasedAnalysisEMotions {
		description "Model-based analysis with eMotions",
		level model,
		evaluates [
			Throughput,
			AverageSystemLoginTime,
			Utilization,
			RequestWaitingTime,
			CPUUsage,
			RequestServiceTime,
			MemoryUsage,
			CostStorage
		]
	}
	
	strategy RuntimeTesting {
		description "Simple Usage Recording on running Code",
		level code,
		evaluates [
			Throughput,
			AverageSystemLoginTime,
			Utilization,
			RequestWaitingTime,
			CPUUsage,
			RequestServiceTime
		]
	}
	
	strategy CloudProviderBenchmarking {
		description "Usage analysis for application on chosen cloud provider.",
		level code,
		evaluates [
			AverageResponseTime,
			RequestWaitingTime
		]
	}
	
	strategy HostPlatformMonitoring {
		description "Host-Platform Monitoring",
		level model,
		evaluates [
			Throughput,
			AverageSystemLoginTime,
			Utilization,
			RequestWaitingTime,
			CPUUsage,
			RequestServiceTime,
			MemoryUsage,
			CostStorage
		]
	}
	
	strategy LoadTesting {
		description "",
		level code,
		evaluates [
			AverageResponseTime
		]
	}
	
	strategy StaticModelAnalysis {
		description "",
		level model,
		evaluates [
			TimeToLearn,
			Coupling
		]
	}
	
	strategy SourceCodeAnalysis {
		description "",
		level code,
		evaluates [
			Coupling,
			TimeToLearn
		]
	}
	
	strategy UserScenarios {
		description "",
		level code,
		evaluates [
			SingleUsabilityRate
		]
	}
}