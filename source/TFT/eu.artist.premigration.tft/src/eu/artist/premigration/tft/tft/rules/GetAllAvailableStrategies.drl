/*******************************************************************************
 * Copyright (c) 2014 Atos.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * 	Burak Karaboga (Atos) - main development
 * 	Initially developed in the context of ARTIST EU project www.artist-project.eu
 *******************************************************************************/
package eu.artist.tft

import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

import eu.artist.premigration.tft.tft.model.Component;
import eu.artist.premigration.tft.tft.model.MigrationGoals;
import eu.artist.premigration.tft.tft.model.TechnicalGoals;

import eu.artist.premigration.tft.tft.model.migrationstrategy.MigrationStrategyContainer;
import eu.artist.premigration.tft.tft.model.migrationstrategy.MigrationStrategy;
import eu.artist.premigration.tft.tft.model.migrationstrategy.Category;
import eu.artist.premigration.tft.tft.model.migrationstrategy.Complexity;

//declare any global variables here

global eu.artist.premigration.tft.tft.model.Component component;
global java.util.List suggestedStrategyIDs;
global java.util.Map strategiesByCategory;
global eu.artist.premigration.tft.tft.model.MigrationGoals migrationGoals;

function void addStrategy(MigrationStrategy strategy, Map strategiesByCategory, List suggestedStrategyIDs) {

	if (!suggestedStrategyIDs.contains(strategy.getId())){
			List containedStrategies = (List) strategiesByCategory.get(strategy.getCategory());
			if (containedStrategies != null){
				containedStrategies.add(strategy);
			}
			else {
				containedStrategies = new ArrayList();
				containedStrategies.add(strategy);
				strategiesByCategory.put(strategy.getCategory(), containedStrategies);
			}
		}
}

rule "SelectAllAvailableStrategiesForComponent"

	when
		$migrationStrategy : MigrationStrategy( targetPlatforms.contains(migrationGoals.targetPlatform) && component.hasStereotype(category.getPossibleStereotypes()))
	then
		addStrategy($migrationStrategy, strategiesByCategory, suggestedStrategyIDs);
		
end

rule "SelectAllAvailableStrategiesForApplicationLevelComponent"

	when
		$migrationStrategy : MigrationStrategy( targetPlatforms.contains(migrationGoals.targetPlatform) && category.equals(Category.APPLICATION) && component.isApplicationLevelComponent())
	then
		addStrategy($migrationStrategy, strategiesByCategory, suggestedStrategyIDs);
end

